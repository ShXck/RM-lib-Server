#include "MemoryHandler.h"

Memory_Handler::Memory_Handler() {
	// TODO Auto-generated constructor stub

}

bool Memory_Handler::is_valid( std::string key ) {
	if( memory_map.contains( key ) ) {
		return false;
	}
	return true;
}

std::string Memory_Handler::store_value( std::string key, std::string value, int size ) {

	if( is_valid( key ) ) {

		RmRef_h *new_container = new RmRef_h( size, value );

		memory_map.add( key, new_container );

		memory_map.display();

		return JSON_Handler::build_msg( false, error::key_is_valid() );
	}
	return JSON_Handler::build_msg( true, error::key_used_err() );
}

std::string Memory_Handler::find_value( std::string key ) {
	if( memory_map.contains( key ) ) {
		RmRef_h* _container = memory_map.get( key );
		_container->add_ref();
		return JSON_Handler::build_get_msg( key.c_str(), _container->_value, _container->_size );
	}
	return JSON_Handler::build_msg( true, error::key_not_found_err() );
}

std::string Memory_Handler::find_value_set( std::string data ) {
	return JSON_Handler::build_set_msg( data.c_str(), memory_map );
}

std::string Memory_Handler::delete_value( std::string key ) {
	if( memory_map.contains( key ) ) {
		memory_map.remove( key );
		memory_map.display();
		return JSON_Handler::build_msg( false, error::key_is_valid() );
	}
	return JSON_Handler::build_msg( true, error::key_not_found_err() );
}

Memory_Handler::~Memory_Handler() { }


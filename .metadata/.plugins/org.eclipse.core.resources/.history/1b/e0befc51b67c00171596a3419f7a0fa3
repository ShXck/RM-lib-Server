#include "MemoryHandler.h"

namespace mh {

Memory_Handler::Memory_Handler() { }

bool Memory_Handler::is_valid( const char* key ) {

	if( !saved_resources.contains( key ) ) return true;

	return false;
}

std::string Memory_Handler::store_value( const char* key, std::string data ) {

	std::string _val = JSON_Handler::get_value( data.c_str(), "value" ).GetString();
	void* value_ptr;

	if( util::is_int( _val ) ) {
		int int_val = std::stoi( _val );
		value_ptr = &int_val;
	} else if( util::is_float( _val ) ) {
		float float_val = std::stof( _val );
		value_ptr = &float_val;
	} else {
		value_ptr = &_val;
	}

	saved_resources.add( key, value_ptr );
	ref_counter.add( 0 );

	saved_resources.display();


	return JSON_Handler::build_new_msg();
}

std::string Memory_Handler::find_value( const char* key ) {
	if( saved_resources.contains( key ) ) {
		void* ref = saved_resources.get( key );
		return JSON_Handler::build_get_msg( key, ref );
	}
	return JSON_Handler::build_error( error::key_not_found_err() );
}

void Memory_Handler::delete_value( const char* key ) {

}

void Memory_Handler::replace_value( const char* key, void* new_value ) {

}

void Memory_Handler::run_garbage_collector() {

}

Memory_Handler::~Memory_Handler() { }

} /* namespace mh */

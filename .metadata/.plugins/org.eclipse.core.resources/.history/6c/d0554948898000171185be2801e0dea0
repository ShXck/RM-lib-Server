#include "MemoryHandler.h"

Memory_Handler::Memory_Handler() {
	// TODO Auto-generated constructor stub

}

bool Memory_Handler::is_valid( std::string key ) {
	if( memory_map.contains( key ) ) {
		return false;
	}
	return true;
}

std::string Memory_Handler::store_value( std::string key, std::string value, int size ) {

	if( is_valid( key ) ) {

		RmRef_h *new_container = new RmRef_h( size, value );

		memory_map.add( key, new_container );

		memory_map.display();

		return JSON_Handler::build_msg( false, error::key_is_valid() );
	}
	return JSON_Handler::build_msg( true, error::key_used_err() );
}

std::string Memory_Handler::find_value( std::string key ) {
	if( memory_map.contains( key ) ) {
		RmRef_h* _container = memory_map.get( key );
		_container->add_ref();
		return JSON_Handler::build_get_msg( key.c_str(), _container->_value, _container->_size );
	}
	return JSON_Handler::build_msg( true, error::key_not_found_err() );
}

std::string Memory_Handler::find_value_set( std::string data ) {
	rapidjson::Document _doc;
		if( !( _doc.Parse< 0 >( data ).HasParseError() ) ) {
			const rapidjson::Value& _keys = _doc[ "keys" ];

			Linked_List< std::string > keys_list;
			Linked_List< std::string > values_list;

			for( rapidjson::SizeType i = 0; i < _keys.Size(); i++ ) {
				const rapidjson::Value& _key = _keys[ i ];
				keys_list.add( _key.GetString() );
				values_list.add( map.get( _key.GetString() )->_value );
			}

			rapidjson::Document return_doc;
			return_doc.SetObject();
			Alloc _alloc = _doc.GetAllocator();

			for( int i = 0; i < keys_list.size(); i++ ) {
				rapidjson::Value str_key;
				str_key.SetString( keys_list.get( i ).c_str(), _alloc );

				rapidjson::Value str_val;
				str_val.SetString( values_list.get( i ).c_str(), _alloc );

				return_doc.AddMember( str_key, str_val, _alloc );
			}
			return_doc.AddMember( "instruction", 4, _alloc );
		}
		return build_msg( true, error::doc_parse_err() );
}

std::string Memory_Handler::delete_value( std::string key ) {
	if( memory_map.contains( key ) ) {
		memory_map.remove( key );
		memory_map.display();
		return JSON_Handler::build_msg( false, error::key_is_valid() );
	}
	return JSON_Handler::build_msg( true, error::key_not_found_err() );
}

Memory_Handler::~Memory_Handler() { }

